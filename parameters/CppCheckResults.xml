<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="include/Parameter.h" line="20" id="operatorEqVarError" severity="style" msg="Member variable &apos;Parameter&lt;double&gt;::m_default_value&apos; is not assigned a value in &apos;Parameter&lt;double&gt;::operator=&apos;." />
    <error file="include/Parameter.h" line="20" id="operatorEqVarError" severity="style" msg="Member variable &apos;Parameter&lt;int32_t&gt;::m_default_value&apos; is not assigned a value in &apos;Parameter&lt;int32_t&gt;::operator=&apos;." />
    <error file="include/Parameter.h" line="62" id="noExplicitConstructor" severity="style" msg="Class &apos;ParameterSet&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="11" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;T&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="11" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;double&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="16" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;double&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="11" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;int32_t&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="16" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;int32_t&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="11" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;string&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="16" id="noExplicitConstructor" severity="style" msg="Class &apos;Parameter&lt;string&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="include/Parameter.h" line="11" id="passedByValue" severity="style" msg="Parameter &apos;default_value&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="include/Parameter.h" line="66" id="unusedFunction" severity="style" msg="The function &apos;load&apos; is never used." />
    <error id="missingIncludeSystem" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
